/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsAgreementRouteImport } from './routes/terms-agreement'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as OrdersRouteImport } from './routes/orders'
import { Route as OrderCompleteRouteImport } from './routes/order-complete'
import { Route as OrderRouteImport } from './routes/order'
import { Route as MyRouteImport } from './routes/my'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StudioIndexRouteImport } from './routes/studio/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as OrdersOrderIdRouteImport } from './routes/orders/$orderId'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminSettingsRouteImport } from './routes/admin/settings'
import { Route as AdminOrdersRouteImport } from './routes/admin/orders'
import { Route as AdminLoginRouteImport } from './routes/admin/login'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminUsersUserIdRouteImport } from './routes/admin/users/$userId'
import { Route as AdminOrdersOrderIdRouteImport } from './routes/admin/orders/$orderId'

const TermsAgreementRoute = TermsAgreementRouteImport.update({
  id: '/terms-agreement',
  path: '/terms-agreement',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersRoute = OrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderCompleteRoute = OrderCompleteRouteImport.update({
  id: '/order-complete',
  path: '/order-complete',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderRoute = OrderRouteImport.update({
  id: '/order',
  path: '/order',
  getParentRoute: () => rootRouteImport,
} as any)
const MyRoute = MyRouteImport.update({
  id: '/my',
  path: '/my',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StudioIndexRoute = StudioIndexRouteImport.update({
  id: '/studio/',
  path: '/studio/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const OrdersOrderIdRoute = OrdersOrderIdRouteImport.update({
  id: '/$orderId',
  path: '/$orderId',
  getParentRoute: () => OrdersRoute,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminOrdersRoute = AdminOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => AdminRoute,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminUsersUserIdRoute = AdminUsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => AdminUsersRoute,
} as any)
const AdminOrdersOrderIdRoute = AdminOrdersOrderIdRouteImport.update({
  id: '/$orderId',
  path: '/$orderId',
  getParentRoute: () => AdminOrdersRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/my': typeof MyRoute
  '/order': typeof OrderRoute
  '/order-complete': typeof OrderCompleteRoute
  '/orders': typeof OrdersRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/terms-agreement': typeof TermsAgreementRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/orders': typeof AdminOrdersRouteWithChildren
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/users': typeof AdminUsersRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/admin/': typeof AdminIndexRoute
  '/studio': typeof StudioIndexRoute
  '/admin/orders/$orderId': typeof AdminOrdersOrderIdRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/my': typeof MyRoute
  '/order': typeof OrderRoute
  '/order-complete': typeof OrderCompleteRoute
  '/orders': typeof OrdersRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/terms-agreement': typeof TermsAgreementRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/orders': typeof AdminOrdersRouteWithChildren
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/users': typeof AdminUsersRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/admin': typeof AdminIndexRoute
  '/studio': typeof StudioIndexRoute
  '/admin/orders/$orderId': typeof AdminOrdersOrderIdRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/my': typeof MyRoute
  '/order': typeof OrderRoute
  '/order-complete': typeof OrderCompleteRoute
  '/orders': typeof OrdersRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/terms-agreement': typeof TermsAgreementRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/orders': typeof AdminOrdersRouteWithChildren
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/users': typeof AdminUsersRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/admin/': typeof AdminIndexRoute
  '/studio/': typeof StudioIndexRoute
  '/admin/orders/$orderId': typeof AdminOrdersOrderIdRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/my'
    | '/order'
    | '/order-complete'
    | '/orders'
    | '/privacy'
    | '/terms'
    | '/terms-agreement'
    | '/admin/dashboard'
    | '/admin/login'
    | '/admin/orders'
    | '/admin/settings'
    | '/admin/users'
    | '/auth/callback'
    | '/orders/$orderId'
    | '/admin/'
    | '/studio'
    | '/admin/orders/$orderId'
    | '/admin/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/my'
    | '/order'
    | '/order-complete'
    | '/orders'
    | '/privacy'
    | '/terms'
    | '/terms-agreement'
    | '/admin/dashboard'
    | '/admin/login'
    | '/admin/orders'
    | '/admin/settings'
    | '/admin/users'
    | '/auth/callback'
    | '/orders/$orderId'
    | '/admin'
    | '/studio'
    | '/admin/orders/$orderId'
    | '/admin/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/my'
    | '/order'
    | '/order-complete'
    | '/orders'
    | '/privacy'
    | '/terms'
    | '/terms-agreement'
    | '/admin/dashboard'
    | '/admin/login'
    | '/admin/orders'
    | '/admin/settings'
    | '/admin/users'
    | '/auth/callback'
    | '/orders/$orderId'
    | '/admin/'
    | '/studio/'
    | '/admin/orders/$orderId'
    | '/admin/users/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  MyRoute: typeof MyRoute
  OrderRoute: typeof OrderRoute
  OrderCompleteRoute: typeof OrderCompleteRoute
  OrdersRoute: typeof OrdersRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  TermsAgreementRoute: typeof TermsAgreementRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  StudioIndexRoute: typeof StudioIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms-agreement': {
      id: '/terms-agreement'
      path: '/terms-agreement'
      fullPath: '/terms-agreement'
      preLoaderRoute: typeof TermsAgreementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order-complete': {
      id: '/order-complete'
      path: '/order-complete'
      fullPath: '/order-complete'
      preLoaderRoute: typeof OrderCompleteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order': {
      id: '/order'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof OrderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my': {
      id: '/my'
      path: '/my'
      fullPath: '/my'
      preLoaderRoute: typeof MyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/studio/': {
      id: '/studio/'
      path: '/studio'
      fullPath: '/studio'
      preLoaderRoute: typeof StudioIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/orders/$orderId': {
      id: '/orders/$orderId'
      path: '/$orderId'
      fullPath: '/orders/$orderId'
      preLoaderRoute: typeof OrdersOrderIdRouteImport
      parentRoute: typeof OrdersRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/orders': {
      id: '/admin/orders'
      path: '/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminOrdersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/users/$userId': {
      id: '/admin/users/$userId'
      path: '/$userId'
      fullPath: '/admin/users/$userId'
      preLoaderRoute: typeof AdminUsersUserIdRouteImport
      parentRoute: typeof AdminUsersRoute
    }
    '/admin/orders/$orderId': {
      id: '/admin/orders/$orderId'
      path: '/$orderId'
      fullPath: '/admin/orders/$orderId'
      preLoaderRoute: typeof AdminOrdersOrderIdRouteImport
      parentRoute: typeof AdminOrdersRoute
    }
  }
}

interface AdminOrdersRouteChildren {
  AdminOrdersOrderIdRoute: typeof AdminOrdersOrderIdRoute
}

const AdminOrdersRouteChildren: AdminOrdersRouteChildren = {
  AdminOrdersOrderIdRoute: AdminOrdersOrderIdRoute,
}

const AdminOrdersRouteWithChildren = AdminOrdersRoute._addFileChildren(
  AdminOrdersRouteChildren,
)

interface AdminUsersRouteChildren {
  AdminUsersUserIdRoute: typeof AdminUsersUserIdRoute
}

const AdminUsersRouteChildren: AdminUsersRouteChildren = {
  AdminUsersUserIdRoute: AdminUsersUserIdRoute,
}

const AdminUsersRouteWithChildren = AdminUsersRoute._addFileChildren(
  AdminUsersRouteChildren,
)

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminLoginRoute: typeof AdminLoginRoute
  AdminOrdersRoute: typeof AdminOrdersRouteWithChildren
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminUsersRoute: typeof AdminUsersRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminLoginRoute: AdminLoginRoute,
  AdminOrdersRoute: AdminOrdersRouteWithChildren,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminUsersRoute: AdminUsersRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface OrdersRouteChildren {
  OrdersOrderIdRoute: typeof OrdersOrderIdRoute
}

const OrdersRouteChildren: OrdersRouteChildren = {
  OrdersOrderIdRoute: OrdersOrderIdRoute,
}

const OrdersRouteWithChildren =
  OrdersRoute._addFileChildren(OrdersRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  MyRoute: MyRoute,
  OrderRoute: OrderRoute,
  OrderCompleteRoute: OrderCompleteRoute,
  OrdersRoute: OrdersRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  TermsAgreementRoute: TermsAgreementRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  StudioIndexRoute: StudioIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
