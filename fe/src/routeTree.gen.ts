/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsAgreementRouteImport } from './routes/terms-agreement'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as SupportRouteImport } from './routes/support'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as OrdersRouteImport } from './routes/orders'
import { Route as OrderCompleteRouteImport } from './routes/order-complete'
import { Route as OrderRouteImport } from './routes/order'
import { Route as MyRouteImport } from './routes/my'
import { Route as LoginRouteImport } from './routes/login'
import { Route as BuildOrderRouteImport } from './routes/build-order'
import { Route as ArtworksRouteImport } from './routes/artworks'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StudioIndexRouteImport } from './routes/studio/index'
import { Route as OrdersOrderIdRouteImport } from './routes/orders/$orderId'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'

const TermsAgreementRoute = TermsAgreementRouteImport.update({
  id: '/terms-agreement',
  path: '/terms-agreement',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SupportRoute = SupportRouteImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersRoute = OrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderCompleteRoute = OrderCompleteRouteImport.update({
  id: '/order-complete',
  path: '/order-complete',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderRoute = OrderRouteImport.update({
  id: '/order',
  path: '/order',
  getParentRoute: () => rootRouteImport,
} as any)
const MyRoute = MyRouteImport.update({
  id: '/my',
  path: '/my',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const BuildOrderRoute = BuildOrderRouteImport.update({
  id: '/build-order',
  path: '/build-order',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtworksRoute = ArtworksRouteImport.update({
  id: '/artworks',
  path: '/artworks',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StudioIndexRoute = StudioIndexRouteImport.update({
  id: '/studio/',
  path: '/studio/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersOrderIdRoute = OrdersOrderIdRouteImport.update({
  id: '/$orderId',
  path: '/$orderId',
  getParentRoute: () => OrdersRoute,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/artworks': typeof ArtworksRoute
  '/build-order': typeof BuildOrderRoute
  '/login': typeof LoginRoute
  '/my': typeof MyRoute
  '/order': typeof OrderRoute
  '/order-complete': typeof OrderCompleteRoute
  '/orders': typeof OrdersRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/support': typeof SupportRoute
  '/terms': typeof TermsRoute
  '/terms-agreement': typeof TermsAgreementRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/studio': typeof StudioIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/artworks': typeof ArtworksRoute
  '/build-order': typeof BuildOrderRoute
  '/login': typeof LoginRoute
  '/my': typeof MyRoute
  '/order': typeof OrderRoute
  '/order-complete': typeof OrderCompleteRoute
  '/orders': typeof OrdersRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/support': typeof SupportRoute
  '/terms': typeof TermsRoute
  '/terms-agreement': typeof TermsAgreementRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/studio': typeof StudioIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/artworks': typeof ArtworksRoute
  '/build-order': typeof BuildOrderRoute
  '/login': typeof LoginRoute
  '/my': typeof MyRoute
  '/order': typeof OrderRoute
  '/order-complete': typeof OrderCompleteRoute
  '/orders': typeof OrdersRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/support': typeof SupportRoute
  '/terms': typeof TermsRoute
  '/terms-agreement': typeof TermsAgreementRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/studio/': typeof StudioIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/artworks'
    | '/build-order'
    | '/login'
    | '/my'
    | '/order'
    | '/order-complete'
    | '/orders'
    | '/privacy'
    | '/support'
    | '/terms'
    | '/terms-agreement'
    | '/auth/callback'
    | '/orders/$orderId'
    | '/studio'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/artworks'
    | '/build-order'
    | '/login'
    | '/my'
    | '/order'
    | '/order-complete'
    | '/orders'
    | '/privacy'
    | '/support'
    | '/terms'
    | '/terms-agreement'
    | '/auth/callback'
    | '/orders/$orderId'
    | '/studio'
  id:
    | '__root__'
    | '/'
    | '/artworks'
    | '/build-order'
    | '/login'
    | '/my'
    | '/order'
    | '/order-complete'
    | '/orders'
    | '/privacy'
    | '/support'
    | '/terms'
    | '/terms-agreement'
    | '/auth/callback'
    | '/orders/$orderId'
    | '/studio/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArtworksRoute: typeof ArtworksRoute
  BuildOrderRoute: typeof BuildOrderRoute
  LoginRoute: typeof LoginRoute
  MyRoute: typeof MyRoute
  OrderRoute: typeof OrderRoute
  OrderCompleteRoute: typeof OrderCompleteRoute
  OrdersRoute: typeof OrdersRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  SupportRoute: typeof SupportRoute
  TermsRoute: typeof TermsRoute
  TermsAgreementRoute: typeof TermsAgreementRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  StudioIndexRoute: typeof StudioIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms-agreement': {
      id: '/terms-agreement'
      path: '/terms-agreement'
      fullPath: '/terms-agreement'
      preLoaderRoute: typeof TermsAgreementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order-complete': {
      id: '/order-complete'
      path: '/order-complete'
      fullPath: '/order-complete'
      preLoaderRoute: typeof OrderCompleteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order': {
      id: '/order'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof OrderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my': {
      id: '/my'
      path: '/my'
      fullPath: '/my'
      preLoaderRoute: typeof MyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/build-order': {
      id: '/build-order'
      path: '/build-order'
      fullPath: '/build-order'
      preLoaderRoute: typeof BuildOrderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artworks': {
      id: '/artworks'
      path: '/artworks'
      fullPath: '/artworks'
      preLoaderRoute: typeof ArtworksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/studio/': {
      id: '/studio/'
      path: '/studio'
      fullPath: '/studio'
      preLoaderRoute: typeof StudioIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/$orderId': {
      id: '/orders/$orderId'
      path: '/$orderId'
      fullPath: '/orders/$orderId'
      preLoaderRoute: typeof OrdersOrderIdRouteImport
      parentRoute: typeof OrdersRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface OrdersRouteChildren {
  OrdersOrderIdRoute: typeof OrdersOrderIdRoute
}

const OrdersRouteChildren: OrdersRouteChildren = {
  OrdersOrderIdRoute: OrdersOrderIdRoute,
}

const OrdersRouteWithChildren =
  OrdersRoute._addFileChildren(OrdersRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArtworksRoute: ArtworksRoute,
  BuildOrderRoute: BuildOrderRoute,
  LoginRoute: LoginRoute,
  MyRoute: MyRoute,
  OrderRoute: OrderRoute,
  OrderCompleteRoute: OrderCompleteRoute,
  OrdersRoute: OrdersRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  SupportRoute: SupportRoute,
  TermsRoute: TermsRoute,
  TermsAgreementRoute: TermsAgreementRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  StudioIndexRoute: StudioIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
