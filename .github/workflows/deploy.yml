name: Deploy to AWS

on:
  push:
    branches: [main]

env:
  PULUMI_BACKEND_URL: s3://pulumi-state-bucket-namvas
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            fe/package-lock.json
            be/package-lock.json
            infrastructure/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::526374022431:role/namvas-ocid
          aws-region: ap-northeast-2

      - name: Install Pulumi CLI
        uses: pulumi/actions@v5

      # Install dependencies
      - name: Install backend dependencies
        run: |
          cd be
          npm ci

      - name: Install frontend dependencies
        run: |
          cd fe
          npm ci

      - name: Install infrastructure dependencies
        run: |
          cd infrastructure
          npm ci

      # Test
      - name: Test backend
        run: |
          cd be
          npm test

      - name: Test frontend
        run: |
          cd fe
          npm test

      # Build
      - name: Build backend for LLRT
        run: |
          cd be
          npm run build:lambda

      - name: Build frontend
        run: |
          cd fe
          npm run build

      # Deploy infrastructure
      - name: Deploy with Pulumi
        run: |
          cd infrastructure
          pulumi stack select dev --create
          pulumi up --yes

      # Upload frontend to S3
      - name: Upload frontend to S3
        run: |
          cd infrastructure
          BUCKET_NAME=$(pulumi stack output frontendBucketName)
          aws s3 sync ../fe/dist/ s3://$BUCKET_NAME --delete

      # Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        run: |
          cd infrastructure
          DISTRIBUTION_ID=$(pulumi stack output cloudFrontDistributionId)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
