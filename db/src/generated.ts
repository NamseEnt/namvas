// Auto-generated schema and CRUD functions
// Generated from: ../db/src/schema.ts
// Schema version: 6
// Do not edit this file directly

import { dbClient } from './index.js';
import { GetCommand, PutCommand, DeleteCommand, QueryCommand } from '@aws-sdk/lib-dynamodb';

export type Docs = {
  session: {
    id: string;
    userId: string;
  };
  account: {
    id: string;
    createdAt: string;
    updatedAt: string;
  };
  identity: {
    id: string;
    accountId: string;
    provider: string;
    providerId: string;
    createdAt: string;
    updatedAt: string;
    email?: string;
    name?: string;
    profileImageUrl?: string;
  };
};

export async function getSession({id}: {id: string}): Promise<Docs['session'] | null> {
  const result = await dbClient.send(new GetCommand({
    TableName: 'main',
    Key: {
      $p: `session/id=${id}`,
      $s: '_'
    }
  }));
  
  if (!result.Item) {
    return null;
  }
  
  // Apply migrations if needed
  return migrateSession(result.Item);
}

export async function putSession(session: Docs['session']): Promise<void> {
  const item = {
    $p: `session/id=${session.id}`,
    $s: '_',
    $v: 6,
    ...session
  };
  
  await dbClient.send(new PutCommand({
    TableName: 'main',
    Item: item
  }));
}

export async function deleteSession({id}: {id: string}): Promise<void> {
  await dbClient.send(new DeleteCommand({
    TableName: 'main',
    Key: {
      $p: `session/id=${id}`,
      $s: '_'
    }
  }));
}

export async function listSessions(options?: {limit?: number; lastKey?: string}): Promise<{items: Docs['session'][], lastKey?: string}> {
  const result = await dbClient.send(new QueryCommand({
    TableName: 'main',
    IndexName: 'GSI1',
    KeyConditionExpression: '$gsi1pk = :docType',
    ExpressionAttributeValues: {
      ':docType': 'session'
    },
    Limit: options?.limit,
    ExclusiveStartKey: options?.lastKey ? JSON.parse(options.lastKey) : undefined
  }));
  
  const items = (result.Items || []).map((item: any) => migrateSession(item));
  const lastKey = result.LastEvaluatedKey ? JSON.stringify(result.LastEvaluatedKey) : undefined;
  
  return { items, lastKey };
}

export async function getAccount({id}: {id: string}): Promise<Docs['account'] | null> {
  const result = await dbClient.send(new GetCommand({
    TableName: 'main',
    Key: {
      $p: `account/id=${id}`,
      $s: '_'
    }
  }));
  
  if (!result.Item) {
    return null;
  }
  
  // Apply migrations if needed
  return migrateAccount(result.Item);
}

export async function putAccount(account: Docs['account']): Promise<void> {
  const item = {
    $p: `account/id=${account.id}`,
    $s: '_',
    $v: 6,
    ...account
  };
  
  await dbClient.send(new PutCommand({
    TableName: 'main',
    Item: item
  }));
}

export async function deleteAccount({id}: {id: string}): Promise<void> {
  await dbClient.send(new DeleteCommand({
    TableName: 'main',
    Key: {
      $p: `account/id=${id}`,
      $s: '_'
    }
  }));
}

export async function listAccounts(options?: {limit?: number; lastKey?: string}): Promise<{items: Docs['account'][], lastKey?: string}> {
  const result = await dbClient.send(new QueryCommand({
    TableName: 'main',
    IndexName: 'GSI1',
    KeyConditionExpression: '$gsi1pk = :docType',
    ExpressionAttributeValues: {
      ':docType': 'account'
    },
    Limit: options?.limit,
    ExclusiveStartKey: options?.lastKey ? JSON.parse(options.lastKey) : undefined
  }));
  
  const items = (result.Items || []).map((item: any) => migrateAccount(item));
  const lastKey = result.LastEvaluatedKey ? JSON.stringify(result.LastEvaluatedKey) : undefined;
  
  return { items, lastKey };
}

export async function getIdentity({id}: {id: string}): Promise<Docs['identity'] | null> {
  const result = await dbClient.send(new GetCommand({
    TableName: 'main',
    Key: {
      $p: `identity/id=${id}`,
      $s: '_'
    }
  }));
  
  if (!result.Item) {
    return null;
  }
  
  // Apply migrations if needed
  return migrateIdentity(result.Item);
}

export async function putIdentity(identity: Docs['identity']): Promise<void> {
  const item = {
    $p: `identity/id=${identity.id}`,
    $s: '_',
    $v: 6,
    ...identity
  };
  
  await dbClient.send(new PutCommand({
    TableName: 'main',
    Item: item
  }));
}

export async function deleteIdentity({id}: {id: string}): Promise<void> {
  await dbClient.send(new DeleteCommand({
    TableName: 'main',
    Key: {
      $p: `identity/id=${id}`,
      $s: '_'
    }
  }));
}

export async function listIdentitys(options?: {limit?: number; lastKey?: string}): Promise<{items: Docs['identity'][], lastKey?: string}> {
  const result = await dbClient.send(new QueryCommand({
    TableName: 'main',
    IndexName: 'GSI1',
    KeyConditionExpression: '$gsi1pk = :docType',
    ExpressionAttributeValues: {
      ':docType': 'identity'
    },
    Limit: options?.limit,
    ExclusiveStartKey: options?.lastKey ? JSON.parse(options.lastKey) : undefined
  }));
  
  const items = (result.Items || []).map((item: any) => migrateIdentity(item));
  const lastKey = result.LastEvaluatedKey ? JSON.stringify(result.LastEvaluatedKey) : undefined;
  
  return { items, lastKey };
}



// Auto-generated migration functions
// Do not edit this file directly

export function migrateSession(doc: any): Docs['session'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  migrated.$v = 6;
  return migrated;
}

export function migrateAccount(doc: any): Docs['account'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  migrated.$v = 6;
  return migrated;
}

export function migrateIdentity(doc: any): Docs['identity'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  // Version 4: Added field email (string) to identity
  if (version < 4) {
    migrated.email = "";
    version = 4;
  }
  
  // Version 5: Added field name (string) to identity
  if (version < 5) {
    migrated.name = "";
    version = 5;
  }
  
  // Version 6: Added field profileImageUrl (string) to identity
  if (version < 6) {
    migrated.profileImageUrl = "";
    version = 6;
  }
  
  migrated.$v = 6;
  return migrated;
}



// Migration history:
// v1: Created document session with 2 fields
// v2: Created document account with 3 fields
// v3: Created document identity with 6 fields
// v4: Added field email (string) to identity
// v5: Added field name (string) to identity
// v6: Added field profileImageUrl (string) to identity
