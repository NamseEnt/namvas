// Auto-generated schema and CRUD functions
// Generated from: /Users/namse/namvas/db/src/schema.ts
// Schema version: 7
// Do not edit this file directly

import { dbClient } from './index.js';

export type Docs = {
  session: {
    id: string;
    userId: string;
  };
  account: {
    id: string;
    createdAt: string;
    updatedAt: string;
  };
  identity: {
    id: string;
    accountId: string;
    provider: string;
    providerId: string;
    createdAt: string;
    updatedAt: string;
    email?: string;
    name?: string;
    profileImageUrl?: string;
  };
  order: {
    id: string;
    orderNumber: string;
    userId: string;
    orderDate: string;
    finalAmount: string;
    status: string;
    quantity: string;
    hasPlasticStand: string;
    artworkDefinition: string;
    textureUrl: string;
    printImageUrl: string;
    thumbnailUrl: string;
    trackingNumber: string;
    adminMemo: string;
    deliveryMemo: string;
    recipient: string;
    createdAt: string;
    updatedAt: string;
  };
};

export async function getSession({id}: {id: string}): Promise<Docs['session'] | undefined> {
  const result = await dbClient.get({
    TableName: 'main',
    Key: {
      $p: `session/id=${id}`,
      $s: '_'
    }
  });
  
  if (!result.Item) {
    return undefined;
  }
  
  // Apply migrations if needed
  return migrateSession(result.Item);
}

export async function putSession(session: Docs['session']): Promise<void> {
  const item = {
    $p: `session/id=${session.id}`,
    $s: '_',
    $v: 7,
    ...session
  };
  
  await dbClient.put({
    TableName: 'main',
    Item: item
  });
}

export async function getAccount({id}: {id: string}): Promise<Docs['account'] | undefined> {
  const result = await dbClient.get({
    TableName: 'main',
    Key: {
      $p: `account/id=${id}`,
      $s: '_'
    }
  });
  
  if (!result.Item) {
    return undefined;
  }
  
  // Apply migrations if needed
  return migrateAccount(result.Item);
}

export async function putAccount(account: Docs['account']): Promise<void> {
  const item = {
    $p: `account/id=${account.id}`,
    $s: '_',
    $v: 7,
    ...account
  };
  
  await dbClient.put({
    TableName: 'main',
    Item: item
  });
}

export async function getIdentity({id}: {id: string}): Promise<Docs['identity'] | undefined> {
  const result = await dbClient.get({
    TableName: 'main',
    Key: {
      $p: `identity/id=${id}`,
      $s: '_'
    }
  });
  
  if (!result.Item) {
    return undefined;
  }
  
  // Apply migrations if needed
  return migrateIdentity(result.Item);
}

export async function putIdentity(identity: Docs['identity']): Promise<void> {
  const item = {
    $p: `identity/id=${identity.id}`,
    $s: '_',
    $v: 7,
    ...identity
  };
  
  await dbClient.put({
    TableName: 'main',
    Item: item
  });
}

export async function getOrder({id}: {id: string}): Promise<Docs['order'] | undefined> {
  const result = await dbClient.get({
    TableName: 'main',
    Key: {
      $p: `order/id=${id}`,
      $s: '_'
    }
  });
  
  if (!result.Item) {
    return undefined;
  }
  
  // Apply migrations if needed
  return migrateOrder(result.Item);
}

export async function putOrder(order: Docs['order']): Promise<void> {
  const item = {
    $p: `order/id=${order.id}`,
    $s: '_',
    $v: 7,
    ...order
  };
  
  await dbClient.put({
    TableName: 'main',
    Item: item
  });
}



// Auto-generated migration functions
// Do not edit this file directly

export function migrateSession(doc: any): Docs['session'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  migrated.$v = 7;
  return migrated;
}

export function migrateAccount(doc: any): Docs['account'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  migrated.$v = 7;
  return migrated;
}

export function migrateIdentity(doc: any): Docs['identity'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  // Version 4: Added field email (string) to identity
  if (version < 4) {
    migrated.email = "";
    version = 4;
  }
  
  // Version 5: Added field name (string) to identity
  if (version < 5) {
    migrated.name = "";
    version = 5;
  }
  
  // Version 6: Added field profileImageUrl (string) to identity
  if (version < 6) {
    migrated.profileImageUrl = "";
    version = 6;
  }
  
  migrated.$v = 7;
  return migrated;
}

export function migrateOrder(doc: any): Docs['order'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  migrated.$v = 7;
  return migrated;
}



// Migration history:
// v1: Created document session with 2 fields
// v2: Created document account with 3 fields
// v3: Created document identity with 6 fields
// v4: Added field email (string) to identity
// v5: Added field name (string) to identity
// v6: Added field profileImageUrl (string) to identity
// v7: Created document order with 18 fields
