// Auto-generated schema and CRUD functions
// Generated from: example-schema.ts
// Schema version: 10
// Do not edit this file directly

import { dbClient } from './index.js';
import { GetCommand, PutCommand, DeleteCommand, QueryCommand } from '@aws-sdk/lib-dynamodb';

export type Docs = {
  User: {
    id: string;
    email: string;
    name?: string;
    createdAt?: string;
    tags?: string[];
  };
  Session: {
    id: string;
    userId: string;
    expiresAt: number;
    device?: string;
  };
};

export async function getUser({id}: {id: string}): Promise<Docs['User'] | null> {
  const result = await dbClient.send(new GetCommand({
    TableName: 'main',
    Key: {
      $p: `User/id=${id}`,
      $s: '_'
    }
  }));
  
  if (!result.Item) {
    return null;
  }
  
  // Apply migrations if needed
  return migrateUser(result.Item);
}

export async function putUser(User: Docs['User']): Promise<void> {
  const item = {
    $p: `User/id=${User.id}`,
    $s: '_',
    $v: 10,
    ...User
  };
  
  await dbClient.send(new PutCommand({
    TableName: 'main',
    Item: item
  }));
}

export async function deleteUser({id}: {id: string}): Promise<void> {
  await dbClient.send(new DeleteCommand({
    TableName: 'main',
    Key: {
      $p: `User/id=${id}`,
      $s: '_'
    }
  }));
}

export async function listUsers(options?: {limit?: number; lastKey?: string}): Promise<{items: Docs['User'][], lastKey?: string}> {
  const result = await dbClient.send(new QueryCommand({
    TableName: 'main',
    IndexName: 'GSI1',
    KeyConditionExpression: '$gsi1pk = :docType',
    ExpressionAttributeValues: {
      ':docType': 'User'
    },
    Limit: options?.limit,
    ExclusiveStartKey: options?.lastKey ? JSON.parse(options.lastKey) : undefined
  }));
  
  const items = (result.Items || []).map(item => migrateUser(item));
  const lastKey = result.LastEvaluatedKey ? JSON.stringify(result.LastEvaluatedKey) : undefined;
  
  return { items, lastKey };
}

export async function getSession({id}: {id: string}): Promise<Docs['Session'] | null> {
  const result = await dbClient.send(new GetCommand({
    TableName: 'main',
    Key: {
      $p: `Session/id=${id}`,
      $s: '_'
    }
  }));
  
  if (!result.Item) {
    return null;
  }
  
  // Apply migrations if needed
  return migrateSession(result.Item);
}

export async function putSession(Session: Docs['Session']): Promise<void> {
  const item = {
    $p: `Session/id=${Session.id}`,
    $s: '_',
    $v: 10,
    ...Session
  };
  
  await dbClient.send(new PutCommand({
    TableName: 'main',
    Item: item
  }));
}

export async function deleteSession({id}: {id: string}): Promise<void> {
  await dbClient.send(new DeleteCommand({
    TableName: 'main',
    Key: {
      $p: `Session/id=${id}`,
      $s: '_'
    }
  }));
}

export async function listSessions(options?: {limit?: number; lastKey?: string}): Promise<{items: Docs['Session'][], lastKey?: string}> {
  const result = await dbClient.send(new QueryCommand({
    TableName: 'main',
    IndexName: 'GSI1',
    KeyConditionExpression: '$gsi1pk = :docType',
    ExpressionAttributeValues: {
      ':docType': 'Session'
    },
    Limit: options?.limit,
    ExclusiveStartKey: options?.lastKey ? JSON.parse(options.lastKey) : undefined
  }));
  
  const items = (result.Items || []).map(item => migrateSession(item));
  const lastKey = result.LastEvaluatedKey ? JSON.stringify(result.LastEvaluatedKey) : undefined;
  
  return { items, lastKey };
}



// Auto-generated migration functions
// Do not edit this file directly

export function migrateUser(doc: any): Docs['User'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  // Version 2: Added field name (string) to User
  if (version < 2) {
    migrated.name = "";
    version = 2;
  }
  
  // Version 3: Added field createdAt (number) to User
  if (version < 3) {
    migrated.createdAt = Date.now();
    version = 3;
  }
  
  // Version 4: Added field isActive (boolean) to User
  if (version < 4) {
    migrated.isActive = true;
    version = 4;
  }
  
  // Version 8: Added field tags (string[]) to User
  if (version < 8) {
    migrated.tags = [];
    version = 8;
  }
  
  // Version 9: Removed field isActive from User
  if (version < 9) {
    delete migrated.isActive;
    version = 9;
  }
  
  // Version 10: Changed type of createdAt to string in User
  if (version < 10) {
    migrated.createdAt = new Date(migrated.createdAt).toISOString();
    version = 10;
  }
  
  migrated.$v = 10;
  return migrated;
}

export function migrateSession(doc: any): Docs['Session'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
  // Version 6: Added field deviceInfo (string) to Session
  if (version < 6) {
    migrated.deviceInfo = "{}";
    version = 6;
  }
  
  // Version 7: Renamed field deviceInfo to device in Session
  if (version < 7) {
    migrated.device = migrated.deviceInfo;
    delete migrated.deviceInfo;
    version = 7;
  }
  
  migrated.$v = 10;
  return migrated;
}



// Migration history:
// v1: Created document User with 2 fields
// v2: Added field name (string) to User
// v3: Added field createdAt (number) to User
// v4: Added field isActive (boolean) to User
// v5: Created document Session with 3 fields
// v6: Added field deviceInfo (string) to Session
// v7: Renamed field deviceInfo to device in Session
// v8: Added field tags (string[]) to User
// v9: Removed field isActive from User
// v10: Changed type of createdAt to string in User
