#!/usr/bin/env bun

import { readFileSync, writeFileSync } from 'fs';
import { parseDocsType } from './parser.js';
import { generateCRUDFunctions } from './generator.js';

async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('Usage: bun run gen <input-file> [output-file]');
    console.log('Example: bun run gen ../db/src/schema.ts ../db/src/generated.ts');
    process.exit(1);
  }

  const inputFile = args[0];
  const outputFile = args[1] || inputFile.replace('.ts', '.generated.ts');

  try {
    console.log(`Reading schema from: ${inputFile}`);
    const sourceCode = readFileSync(inputFile, 'utf-8');
    
    console.log('Parsing Docs type...');
    const schemas = parseDocsType(sourceCode);
    
    if (schemas.length === 0) {
      console.log('No schemas found in the input file.');
      process.exit(0);
    }

    console.log(`Found ${schemas.length} schema(s):`);
    schemas.forEach(schema => {
      console.log(`  - ${schema.name} (${schema.properties.length} properties)`);
    });

    console.log('Generating CRUD functions...');
    const generatedCode = generateCRUDFunctions(schemas);
    
    const fullOutput = `// Auto-generated CRUD functions
// Generated from: ${inputFile}
// Do not edit this file directly

export type Docs = {
${schemas.map(schema => 
  `    ${schema.name}: {
${schema.properties.map(prop => 
  `        ${prop.comments?.length ? `// ${prop.comments.join(' ')}` : ''}
        ${prop.name}${prop.isOptional ? '?' : ''}: ${prop.type};`
).join('\n')}
    }`
).join('\n')}
}

${generatedCode}`;

    console.log(`Writing output to: ${outputFile}`);
    writeFileSync(outputFile, fullOutput);
    
    console.log('✅ Schema generation completed successfully!');
    
  } catch (error) {
    console.error('❌ Error:', error instanceof Error ? error.message : error);
    process.exit(1);
  }
}

if (import.meta.main) {
  main();
}