import { SchemaEvolution, MigrationStep, DocumentDefinition, FieldType } from './evolution-types.js';

export function generateMigrations(evolution: SchemaEvolution): string {
  let output = `// Auto-generated migration functions
// Do not edit this file directly

`;

  // Generate migration function for each document
  for (const [docName, docDef] of evolution.documents) {
    output += generateDocumentMigration(docName, docDef, evolution.migrations);
    output += '\n\n';
  }

  return output;
}

function generateDocumentMigration(
  documentName: string, 
  finalDefinition: DocumentDefinition, 
  migrations: MigrationStep[]
): string {
  const maxVersion = Math.max(...migrations.map(m => m.version), 1);
  const relevantMigrations = migrations.filter(m => 
    m.command.type === 'new_document' && m.command.documentName === documentName ||
    (m.command.type !== 'new_document' && 'documentName' in m.command && m.command.documentName === documentName)
  );

  const typeName = capitalizeFirst(documentName);
  
  let output = `export function migrate${typeName}(doc: any): Docs['${documentName}'] {
  let version = doc.$v || 1;
  let migrated = { ...doc };
  
`;

  // Generate migration steps
  for (const migration of relevantMigrations) {
    if (migration.command.type === 'new_document') {
      continue; // Skip new_document as it's the base
    }

    output += `  // Version ${migration.version}: ${migration.description}
  if (version < ${migration.version}) {
    ${generateMigrationStep(migration)}
    version = ${migration.version};
  }
  
`;
  }

  output += `  migrated.$v = ${maxVersion};
  return migrated;
}`;

  return output;
}

function generateMigrationStep(migration: MigrationStep): string {
  const command = migration.command;
  
  switch (command.type) {
    case 'add_field':
      return `migrated.${command.fieldName} = ${getDefaultValueCode(command.fieldType, command.defaultValue)};`;
    
    case 'remove_field':
      return `delete migrated.${command.fieldName};`;
    
    case 'rename_field':
      return `migrated.${command.newFieldName} = migrated.${command.oldFieldName};
    delete migrated.${command.oldFieldName};`;
    
    case 'change_type':
      return `migrated.${command.fieldName} = ${command.migrationFunction.replace('value', `migrated.${command.fieldName}`)};`;
    
    default:
      return '// Unknown migration step';
  }
}

function getDefaultValueCode(fieldType: FieldType, defaultValue: string): string {
  switch (fieldType) {
    case 'string':
      return `"${defaultValue}"`;
    case 'number':
      return isNaN(Number(defaultValue)) ? defaultValue : defaultValue;
    case 'boolean':
      return defaultValue === 'true' ? 'true' : 'false';
    case 'string[]':
      return defaultValue === '[]' ? '[]' : `["${defaultValue}"]`;
    case 'number[]':
      return defaultValue === '[]' ? '[]' : `[${defaultValue}]`;
    case 'object':
      return defaultValue === '{}' ? '{}' : defaultValue;
    default:
      return `"${defaultValue}"`;
  }
}

function capitalizeFirst(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1);
}