#!/usr/bin/env bun

import { writeFileSync } from 'fs';
import { executeTypeScriptSchema } from './typescript-executor.js';
import { generateMigrations } from './migration-generator.js';
import { generateEvolutionCRUD } from './evolution-crud-generator.js';

async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('Usage: bun run schema <input-file.ts> [output-file]');
    console.log('Example: bun run schema schema.ts generated.ts');
    process.exit(1);
  }

  const inputFile = args[0];
  const outputFile = args[1] || inputFile.replace(/\.ts$/, '.generated.ts');

  // Validate input file extension
  if (!inputFile.endsWith('.ts')) {
    console.error('‚ùå Input file must be a TypeScript file (.ts)');
    process.exit(1);
  }

  try {
    console.log(`üìñ Executing TypeScript schema from: ${inputFile}`);
    
    const evolution = await executeTypeScriptSchema(inputFile);
    
    if (evolution.documents.size === 0) {
      console.log('‚ö†Ô∏è  No documents found in the schema file.');
      process.exit(0);
    }

    console.log(`üìä Found ${evolution.documents.size} document(s):`);
    for (const [name, doc] of evolution.documents) {
      console.log(`  - ${name} (${doc.fields.length} fields, created in v${doc.version})`);
    }
    
    console.log(`üìà Current schema version: ${evolution.currentVersion}`);
    console.log(`üîÑ Total migrations: ${evolution.migrations.length}`);

    console.log('‚öôÔ∏è  Generating TypeScript code...');
    
    // Generate migrations
    const migrationCode = generateMigrations(evolution);
    
    // Generate CRUD functions with migration support
    const crudCode = generateEvolutionCRUD(evolution);
    
    // Combine everything
    const fullOutput = `// Auto-generated schema and CRUD functions
// Generated from: ${inputFile}
// Schema version: ${evolution.currentVersion}
// Do not edit this file directly

${crudCode}

${migrationCode}

// Migration history:
${evolution.migrations.map(m => `// v${m.version}: ${m.description}`).join('\n')}
`;

    console.log(`üíæ Writing output to: ${outputFile}`);
    writeFileSync(outputFile, fullOutput);
    
    console.log('‚úÖ TypeScript schema generation completed successfully!');
    console.log(`
üìã Summary:
  - Documents: ${evolution.documents.size}
  - Current version: ${evolution.currentVersion}
  - Generated functions: ${Array.from(evolution.documents.keys()).map(name => 
    `get${capitalizeFirst(name)}, put${capitalizeFirst(name)}, delete${capitalizeFirst(name)}, list${capitalizeFirst(name)}s`
  ).join(', ')}
`);
    
  } catch (error) {
    console.error('‚ùå Error:', error instanceof Error ? error.message : error);
    process.exit(1);
  }
}

function capitalizeFirst(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

if (import.meta.main) {
  main();
}