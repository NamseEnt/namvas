import { parseTypeScriptSchema } from './schema-gen/typescript-type-parser';
import { generateEvolutionCRUD } from './schema-gen/evolution-crud-generator';
import { writeFileSync } from 'fs';

export function generateSchema(inputPath: string, outputPath: string): void {
  console.log(`📖 Parsing TypeScript schema from: ${inputPath}`);
  
  const evolution = parseTypeScriptSchema(inputPath);
  
  if (evolution.documents.size === 0) {
    throw new Error('No documents found in the schema file');
  }

  console.log(`📊 Found ${evolution.documents.size} document(s):`);
  for (const [name, doc] of evolution.documents) {
    console.log(`  - ${name} (${doc.fields.length} fields)`);
  }
  
  if (evolution.indexes.size > 0) {
    console.log(`🔍 Found ${evolution.indexes.size} index(es):`);
    for (const [name, index] of evolution.indexes) {
      console.log(`  - ${name} (${index.ownerDocument} -> ${index.itemDocument})`);
    }
  }
  
  if (evolution.ownerships.length > 0) {
    console.log(`🔗 Found ${evolution.ownerships.length} ownership relation(s):`);
    for (const ownership of evolution.ownerships) {
      console.log(`  - ${ownership.ownerDocument} owns ${ownership.ownedDocument} via ${ownership.ownerField}`);
    }
  }

  console.log('⚙️  Generating TypeScript code...');
  
  // Generate CRUD functions
  const crudCode = generateEvolutionCRUD(evolution);
  
  // Combine everything
  const fullOutput = `// Auto-generated database functions
// Generated from: ${inputPath}
// Do not edit this file directly
// Generated at: ${new Date().toISOString()}

${crudCode}
`;

  console.log(`💾 Writing output to: ${outputPath}`);
  writeFileSync(outputPath, fullOutput);
  
  console.log('✅ Schema generation completed successfully!');
}