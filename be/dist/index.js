var h=async(e,t)=>{try{let o=t.cookies.get("sessionId")||"temporary-session-id";return{ok:!0,tosAgreed:!1}}catch{return{ok:!1,reason:"NOT_LOGGED_IN"}}};import{dbClient as m,putAccount as O,putIdentity as _,putSession as C}from"db";async function I(){let e=new Uint8Array(16);crypto.getRandomValues(e),e[6]=e[6]&15|64,e[8]=e[8]&63|128;let t=Array.from(e,o=>o.toString(16).padStart(2,"0")).join("");return`${t.slice(0,8)}-${t.slice(8,12)}-${t.slice(12,16)}-${t.slice(16,20)}-${t.slice(20,32)}`}async function A(e){try{let t=await fetch("https://oauth2.googleapis.com/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({code:e.authorizationCode,client_id:process.env.GOOGLE_CLIENT_ID,client_secret:process.env.GOOGLE_CLIENT_SECRET,redirect_uri:process.env.GOOGLE_REDIRECT_URI,grant_type:"authorization_code"})});if(!t.ok)return console.error("Token exchange failed:",await t.text()),{ok:!1,reason:"INVALID_CODE"};let o=await t.json(),n=await fetch("https://www.googleapis.com/oauth2/v2/userinfo",{headers:{Authorization:`Bearer ${o.access_token}`}});if(!n.ok)return console.error("User info fetch failed:",await n.text()),{ok:!1,reason:"GOOGLE_API_ERROR"};let i=await n.json(),a=i.id,p=i.email,u=i.name,l=i.picture,c=await m.query({TableName:"main",KeyConditionExpression:"pk = :pk",ExpressionAttributeValues:{":pk":`identity/provider=google/providerId=${a}`}}),s;if(!c.Items||c.Items.length===0){s=await I();let r=new Date().toISOString();await O({id:s,createdAt:r,updatedAt:r});let d=await I();await _({id:d,accountId:s,provider:"google",providerId:a,email:p,name:u,profileImageUrl:l,createdAt:r,updatedAt:r}),await m.put({TableName:"main",Item:{$p:`identity/provider=google/providerId=${a}`,$s:"_",identityId:d}})}else{let r=c.Items[0].identityId;s=(await m.get({TableName:"main",Key:{$p:`identity/id=${r}`,$s:"_"}})).Item.accountId}let y=await I();return await C({id:y,userId:s}),{ok:!0}}catch(t){return console.error("Google login error:",t),{ok:!1,reason:"GOOGLE_API_ERROR"}}}import{dbClient as f,putAccount as R,putIdentity as E,putSession as k}from"db";async function w(){let e=new Uint8Array(16);crypto.getRandomValues(e),e[6]=e[6]&15|64,e[8]=e[8]&63|128;let t=Array.from(e,o=>o.toString(16).padStart(2,"0")).join("");return`${t.slice(0,8)}-${t.slice(8,12)}-${t.slice(12,16)}-${t.slice(16,20)}-${t.slice(20,32)}`}async function T(e){try{let t=await fetch("https://api.twitter.com/2/oauth2/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({code:e.authorizationCode,client_id:process.env.TWITTER_CLIENT_ID,redirect_uri:process.env.TWITTER_REDIRECT_URI,grant_type:"authorization_code",code_verifier:e.codeVerifier})});if(!t.ok)return console.error("Twitter token exchange failed:",await t.text()),{ok:!1,reason:"INVALID_CODE"};let o=await t.json(),n=await fetch("https://api.twitter.com/2/users/me?user.fields=id,name,username,profile_image_url",{headers:{Authorization:`Bearer ${o.access_token}`}});if(!n.ok)return console.error("Twitter user info fetch failed:",await n.text()),{ok:!1,reason:"TWITTER_API_ERROR"};let i=await n.json(),a=i.data.id,p=i.data.name,u=i.data.username,l=i.data.profile_image_url,c=await f.query({TableName:"main",KeyConditionExpression:"pk = :pk",ExpressionAttributeValues:{":pk":`identity/provider=twitter/providerId=${a}`}}),s;if(!c.Items||c.Items.length===0){s=await w();let r=new Date().toISOString();await R({id:s,createdAt:r,updatedAt:r});let d=await w();await E({id:d,accountId:s,provider:"twitter",providerId:a,email:null,name:p,username:u,profileImageUrl:l,createdAt:r,updatedAt:r}),await f.put({TableName:"main",Item:{$p:`identity/provider=twitter/providerId=${a}`,$s:"_",identityId:d}})}else{let r=c.Items[0].identityId;s=(await f.get({TableName:"main",Key:{$p:`identity/id=${r}`,$s:"_"}})).Item.accountId}let y=await w();return await k({id:y,userId:s}),{ok:!0}}catch(t){return console.error("Twitter login error:",t),{ok:!1,reason:"TWITTER_API_ERROR"}}}var g={getMe:h,loginWithGoogle:A,loginWithTwitter:T};var D=async(e,t)=>{try{if(e.httpMethod&&e.path){let o=e.path.slice(1);if(e.httpMethod==="GET"&&o==="health")return{statusCode:200,headers:{"Content-Type":"text/plain","Access-Control-Allow-Origin":"*"},body:"OK"};if(e.httpMethod==="POST"&&Object.keys(g).includes(o)){let n={};if(e.body)try{n=JSON.parse(e.body)}catch{n={}}let i=g[o];if(!i)return{statusCode:404,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify({error:"Handler not found"})};let a=new Map;e.headers?.Cookie&&e.headers.Cookie.split(";").forEach(u=>{let[l,c]=u.trim().split("=");l&&c&&a.set(l,c)});let p=await i(n,{cookies:a});return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"POST, GET, OPTIONS","Access-Control-Allow-Headers":"Content-Type"},body:JSON.stringify(p)}}return e.httpMethod==="OPTIONS"?{statusCode:200,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"POST, GET, OPTIONS","Access-Control-Allow-Headers":"Content-Type"},body:""}:{statusCode:404,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify({error:"Not Found"})}}return console.log("Non-HTTP event received:",e),{statusCode:200,body:JSON.stringify({message:"Event processed"})}}catch(o){return console.error("Lambda Error:",o),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify({error:"Internal Server Error"})}}};export{D as handler};
