FROM node:20-alpine

# Install necessary packages
RUN apk add --no-cache \
    curl \
    bash \
    zip \
    unzip

# Install bun
RUN curl -fsSL https://bun.sh/install | bash
ENV PATH="/root/.bun/bin:$PATH"

# Set working directory
WORKDIR /opt/code

# Download LLRT binary (regular LLRT, not lambda version)
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "aarch64" ]; then \
        curl -L -o llrt.zip https://github.com/awslabs/llrt/releases/latest/download/llrt-linux-arm64.zip; \
    else \
        curl -L -o llrt.zip https://github.com/awslabs/llrt/releases/latest/download/llrt-linux-x64.zip; \
    fi && \
    unzip llrt.zip && \
    mv llrt /opt/code/llrt && \
    chmod +x /opt/code/llrt && \
    rm llrt.zip

# Copy package files first for better caching
COPY be/package*.json /opt/code/be/
COPY shared/package*.json /opt/code/shared/
COPY local-lambda-emulator/package*.json /opt/code/local-lambda-emulator/

# Install dependencies (cached layer)
WORKDIR /opt/code/be
RUN npm ci

WORKDIR /opt/code/shared
RUN npm ci

WORKDIR /opt/code/local-lambda-emulator
RUN bun install

# Copy source code
COPY be /opt/code/be
COPY shared /opt/code/shared
COPY local-lambda-emulator /opt/code/local-lambda-emulator

# Set up backend
WORKDIR /opt/code/be

# Generate schema
RUN npm run schema-gen

# Set up lambda emulator (already installed above)
WORKDIR /opt/code/local-lambda-emulator

# Set environment variables
ENV LLRT_PATH=/opt/code/llrt
ENV BE_PATH=/opt/code/be
ENV PORT=3003
ENV LOCAL_DEV=1

EXPOSE 3003

# Copy startup script
COPY e2e/lambda-emulator-start.sh /opt/code/start.sh
RUN chmod +x /opt/code/start.sh

# Start the lambda emulator
CMD ["/opt/code/start.sh"]